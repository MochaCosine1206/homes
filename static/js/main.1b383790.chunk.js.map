{"version":3,"sources":["utils/API.js","components/AvailableCard/index.js","components/InventoryCard/index.js","components/MultipleSelect/index.js","components/ContentContainer/index.js","components/MainComponent/index.js","App.js","serviceWorker.js","index.js"],"names":["API","getData","axios","get","useStyles","makeStyles","card","minWidth","pos","marginBottom","AvailableCard","props","classes","react_default","a","createElement","Container","maxWidth","Card","className","id","root","Grid","container","spacing","item","xs","name","Table","TableHead","TableRow","TableCell","TableBody","modelNumber","src","ThumbnailImage","alt","flexGrow","InventoryCard","theme","display","flexWrap","formControl","margin","noLabel","marginTop","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","getStyles","features","featureName","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","MultipleSelect","allFeatures","useTheme","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setFeatureName","FormControl","InputLabel","htmlFor","Select","multiple","value","onChange","event","target","filterChange","input","Input","map","feature","MenuItem","key","ContentContainer","search","filter","allHomes","availableHomes","home","IsModel","inventoryHomes","setValue","AppBar","position","color","Typography","variant","Tabs","indicatorColor","textColor","newValue","Tab","label","filterData","startAdornment","InputAdornment","Search_default","filterFeatures","components_InventoryCard","Id","Description","HomeId","thumbnail","components_AvailableCard","MainComponent","state","console","log","then","res","filteredHomes","data","Homes","toLowerCase","includes","_this","setState","selection","undefined","length","_home$Features","Features","apply","toConsumableArray","_this2","this","components_ContentContainer","Set","flat","concat","Component","App","components_MainComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b383790.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    \r\ngetData: function () {\r\n    return axios.get(`https://fast-everglades-97829.herokuapp.com/homes`)\r\n}\r\n\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Container from '@material-ui/core/Container'\r\nimport Card from '@material-ui/core/Card'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport \"./style.css\";\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        minWidth: 275,\r\n    },\r\n    pos: {\r\n        marginBottom: 20,\r\n    }\r\n})\r\n\r\n\r\nexport function AvailableCard(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Card className={classes.card, classes.pos} id=\"houseCards\">\r\n                <div className={classes.root}>\r\n                    <Grid container spacing={2}>\r\n                    <Grid item xs={8} id=\"cardText\">\r\n                        <h5 id=\"cardName\">{props.name}</h5>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Id # </TableCell>\r\n                                        <TableCell>Model #</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell className=\"left-align\">{props.id}</TableCell>\r\n                                    <TableCell className=\"left-align\">{props.modelNumber}</TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                            </Table>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <img id=\"houseThumbnail\" src={props.ThumbnailImage || \"https://via.placeholder.com/200X150\"} alt=\"...\" />\r\n                    </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Card>\r\n        </Container>  \r\n    );\r\n}\r\n\r\n\r\nexport default AvailableCard","import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Container from '@material-ui/core/Container'\r\nimport Card from '@material-ui/core/Card'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport \"./style.css\";\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        minWidth: 275,\r\n    },\r\n    pos: {\r\n        marginBottom: 20,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    }\r\n})\r\n\r\n\r\nexport function InventoryCard(props) {\r\n    const classes = useStyles();\r\n    return (\r\n            <Container maxWidth=\"md\">\r\n            <Card className={classes.card, classes.pos} id=\"houseCards\">\r\n                <div className={classes.root}>\r\n                    <Grid container spacing={2}>\r\n                    <Grid item xs={8} id=\"cardText\">\r\n                        <h5 id=\"cardName\">{props.name}</h5>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Id # </TableCell>\r\n                                        <TableCell>Model #</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell className=\"left-align\">{props.id}</TableCell>\r\n                                    <TableCell className=\"left-align\">{props.modelNumber}</TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                            </Table>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <img id=\"houseThumbnail\" src={props.ThumbnailImage || \"https://via.placeholder.com/200X150\"} alt=\"...\" />\r\n                    </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Card>\r\n        </Container>  \r\n    );\r\n}\r\n\r\n\r\nexport default InventoryCard","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport \"./style.css\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    maxWidth: 500,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 350,\r\n    },\r\n  },\r\n};\r\n\r\n\r\n\r\nfunction getStyles(features, featureName, theme) {\r\n  return {\r\n    fontWeight:\r\n    featureName.indexOf(features) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nexport default function MultipleSelect(props) {\r\n  const features = props.allFeatures;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [featureName, setFeatureName] = React.useState([]);\r\n\r\n  function handleChange(event) {\r\n    setFeatureName(event.target.value);\r\n    props.filterChange(event.target.value)\r\n  }\r\n\r\n  \r\n  return (\r\n    \r\n    <div className={classes.root}>\r\n      <FormControl id=\"multiSelect\" className={classes.formControl}>\r\n        <InputLabel htmlFor=\"select-multiple\">Select Multiple Features</InputLabel>\r\n        <Select\r\n          multiple\r\n          value={featureName}\r\n          onChange={handleChange}\r\n          input={<Input id=\"select-multiple\" />}\r\n          MenuProps={MenuProps}\r\n          \r\n        >\r\n          {features.map(feature => (\r\n            <MenuItem key={feature} value={feature} style={getStyles(feature, featureName, theme)}>\r\n              {feature}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Tabs from '@material-ui/core/Tabs'\r\nimport Tab from '@material-ui/core/Tab'\r\nimport AvailableCard from '../AvailableCard'\r\nimport InventoryCard from '../InventoryCard'\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Container from '@material-ui/core/Container';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Search from '@material-ui/icons/Search';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MultipleSelect from '../MultipleSelect'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport \"./style.css\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n})\r\n\r\n\r\nexport function ContentContainer(props) {\r\n    let search = \"\";\r\n    let filter= [];\r\n    let allHomes = props.allHomes\r\n    let availableHomes = allHomes.filter(home => home.IsModel === true)\r\n    let inventoryHomes = allHomes.filter(home => home.IsModel === false)\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    function handleChange(event, newValue) {\r\n        setValue(newValue)\r\n    }\r\n\r\n\r\n    function searchChange (event, value) {\r\n        search = event.target.value;\r\n        props.filterData(search)\r\n    }\r\n\r\n    function filterChange (feature) {\r\n        filter = feature;\r\n        props.filterFeatures(feature)\r\n    }\r\n\r\n    \r\n\r\n    return (   \r\n        <div className={ classes.root }>\r\n            \r\n            <AppBar position=\"static\" color=\"default\">\r\n            <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h5\" id=\"brand\">Home Inventory</Typography>\r\n                    <Tabs indicatorColor=\"primary\" textColor=\"primary\" value={value} onChange={handleChange}>\r\n                        <Tab label=\"Inventory\" />\r\n                        <Tab label=\"Available\" />\r\n                    </Tabs>\r\n                    </Container>\r\n            </AppBar>\r\n            <Container maxWidth=\"md\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n            <FormControl\r\n            id=\"searchBar\" \r\n            className={classes.margin} value={search} \r\n            onChange={searchChange}>\r\n            <InputLabel htmlFor=\"input-with-icon-adornment\">Search for a home</InputLabel>\r\n            <Input\r\n            startAdornment={\r\n                <InputAdornment position=\"start\">\r\n                <Search />\r\n                </InputAdornment>\r\n            }\r\n            />\r\n        </FormControl>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n        <MultipleSelect\r\n        value={filter} \r\n        allFeatures={props.allFeatures}\r\n        filterChange={filterChange}\r\n        />\r\n        </Grid>\r\n        </Grid>\r\n        </Container>\r\n            {value === 0 && inventoryHomes.map(home => (\r\n                    <InventoryCard\r\n                    key={home.Id}\r\n                    id={home.Id}\r\n                    name={home.Description}\r\n                    modelNumber={home.HomeId}\r\n                    thumbnail={home.ThumbnailImage}\r\n                     />\r\n                ))}\r\n            {value === 1 && availableHomes.map(home => (\r\n                    <AvailableCard\r\n                    key={home.Id}\r\n                    id={home.Id}\r\n                    name={home.Description}\r\n                    modelNumber={home.HomeId}\r\n                    thumbnail={home.ThumbnailImage}\r\n                     />\r\n                ))}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ContentContainer","import React, { Component } from \"react\";\r\nimport API from '../../utils/API'\r\nimport ContentContainer from \"../ContentContainer\"\r\nimport \"./style.css\";\r\n\r\n\r\nclass MainComponent extends Component {\r\n    state = {\r\n        allHomes: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        API.getData()\r\n            .then(res => {\r\n                this.setState({ allHomes: res.data.Homes })\r\n            })\r\n    }\r\n\r\n    filterData = search => {\r\n            console.log(search)\r\n                API.getData()\r\n                .then(res => {\r\n                    if(!search){\r\n                        this.setState({ allHomes: res.data.Homes })\r\n                    } else {\r\n                        let filteredHomes = res.data.Homes.filter((home) => {\r\n                            return (home.Description.toLowerCase().includes(search.toLowerCase()) ||\r\n                            home.HomeId.toLowerCase().includes(search.toLowerCase()))})\r\n                        this.setState({ allHomes: filteredHomes })\r\n                    }\r\n                    \r\n                })\r\n            \r\n        \r\n    }\r\n\r\n    filterFeatures = selection => {\r\n            API.getData()\r\n            .then(res => {\r\n                if(selection === undefined || selection.length == 0){\r\n                    this.setState({ allHomes: res.data.Homes })\r\n                } else {\r\n                    let filteredHomes = res.data.Homes.filter((home) => {\r\n                        return (home.Features.includes(...selection) )})\r\n                    this.setState({ allHomes: filteredHomes })\r\n                }\r\n                \r\n            })\r\n        \r\n    \r\n}\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div id=\"mainContent\">\r\n                <ContentContainer \r\n                allHomes={this.state.allHomes}\r\n                filterData={this.filterData}\r\n                filterFeatures={this.filterFeatures}\r\n                allFeatures={[...[...new Set(this.state.allHomes.map(home => home.Features).flat())]]}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MainComponent;","import React from 'react';\nimport MainComponent from './components/MainComponent'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}